// src/pages/FieldEditor.tsx
import { useState } from "react"
import { useNavigate } from "react-router-dom"
import { MapContainer, TileLayer, Polygon, useMapEvents } from "react-leaflet"
import "leaflet/dist/leaflet.css"

export default function FieldEditor() {
    const [points, setPoints] = useState<[number, number][]>([])
    const [name, setName] = useState("")
    const [crop, setCrop] = useState("")
    const navigate = useNavigate()

    const handleSave = () => {
        if (!name || !crop || points.length < 3) return
        const newField = {
            name,
            crop,
            coordinates: points,
            metrics: { moisture: "‚Äî", temperature: "‚Äî" },
        }
        const stored = localStorage.getItem("fields")
        const fields = stored ? JSON.parse(stored) : []
        fields.push(newField)
        localStorage.setItem("fields", JSON.stringify(fields))
        navigate("/fields")
    }

    function MapClickHandler() {
        useMapEvents({
            click(e) {
                setPoints((prev) => [...prev, [e.latlng.lat, e.latlng.lng]])
            },
        })
        return null
    }

    return (
        <div style={{ maxWidth: "960px", margin: "0 auto", padding: "2rem" }}>
            <h2 style={{ fontSize: "1.8rem", marginBottom: "1rem" }}>–ù–æ–≤–æ–µ –ø–æ–ª–µ</h2>

            {/* üëá –§–æ—Ä–º–∞ */}
            <div style={{
                background: "#fff",
                padding: "1rem",
                borderRadius: "8px",
                border: "1px solid #ddd",
                display: "flex",
                flexDirection: "column",
                gap: "1rem",
                marginBottom: "1.5rem"
            }}>
                <input
                    type="text"
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    style={{
                        padding: "10px",
                        fontSize: "16px",
                        borderRadius: "6px",
                        border: "1px solid #ccc",
                        width: "100%",
                    }}
                />
                <select
                    value={crop}
                    onChange={(e) => setCrop(e.target.value)}
                    style={{
                        padding: "10px",
                        fontSize: "16px",
                        borderRadius: "6px",
                        border: "1px solid #ccc",
                        width: "100%",
                    }}
                >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É</option>
                    <option value="–ø—à–µ–Ω–∏—Ü–∞">–ü—à–µ–Ω–∏—Ü–∞</option>
                    <option value="–∫—É–∫—É—Ä—É–∑–∞">–ö—É–∫—É—Ä—É–∑–∞</option>
                    <option value="–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å">–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å</option>
                    <option value="–ø–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫">–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫</option>
                </select>
            </div>

            {/* üëá –ö–∞—Ä—Ç–∞ */}
            <div style={{ border: "1px solid #ccc", borderRadius: "8px", overflow: "hidden" }}>
                <MapContainer center={[55.75, 37.61]} zoom={14} style={{ height: "400px" }}>
                    <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
                    <MapClickHandler />
                    {points.length >= 3 && (
                        <Polygon positions={points} pathOptions={{ color: "green" }} />
                    )}
                </MapContainer>
            </div>

            {/* üëá –ö–Ω–æ–ø–∫–∞ */}
            <div style={{ marginTop: "1rem" }}>
                <button onClick={handleSave} disabled={!name || !crop || points.length < 3}>
                    ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–µ
                </button>
            </div>
        </div>
    )
}
